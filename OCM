from google.colab import files
uploaded = files.upload()

import pandas as pd
import io
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_excel(io.BytesIO(uploaded['OCM Raw data.xlsx']))
print(df)

cation1 = df.pivot(columns='Cation 1', values='Cation 1 mol%')
cation2 = df.pivot(columns='Cation 2', values='Cation 2 mol%')
cation3 = df.pivot(columns='Cation 3', values='Cation 3 mol%')
cation4 = df.pivot(columns='Cation 4', values='Cation 4 mol%')
anion1 = df.pivot(columns='Anion 1', values='Anion 1 mol%')
anion2 = df.pivot(columns='Anion 2', values='Anion 2 mol%')
support1 = df.pivot(columns='Support 1', values='Support 1 mol%')
support2 = df.pivot(columns='Support 2', values='Support 2 mol%')

pivot_lists = [cation1,cation2,cation3,cation4,anion1,anion2,support1,support2]
concat_pivot_lists = pd.concat(pivot_lists, axis = 1, sort = True)
composition = concat_pivot_lists.groupby(level=0,axis=1).sum()/100

print(composition.head())
pub_nr = df.iloc[:,0]
reaction_data = df.iloc[:,19:]

cleaned_list = [pub_nr, composition, reaction_data]
data_cleaned = pd.concat(cleaned_list, axis = 1, sort = True)
print(data_cleaned.head())

print(composition.mean(axis=0).sort_values(ascending=False).head(18).keys())
count=1
max_val = len(composition.mean(axis=0).sort_values(ascending=False).head(9).keys())

plt.figure(figsize=(9,9))
for element in composition.mean(axis=0).sort_values(ascending=False).head(9).keys():
  plt.subplot(np.sqrt(max_val),np.sqrt(max_val),count)
  plt.title(element)
  plt.xlabel('molar amount, %')
  plt.ylabel('S(C2), %')
  plt.scatter(data_cleaned[element], data_cleaned['S(C2), %'])
  count += 1
  plt.tight_layout()
  
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE

cluster = KMeans(n_clusters=7)
cluster.fit(composition)
cluster_predictions = cluster.predict(composition)

count=0
elements = composition.mean(axis=0).sort_values(ascending=False).head(9).keys()
fig, axs = plt.subplots(3,3, figsize = (15,12))
fig.subplots_adjust(wspace=0.3,hspace=0.3)
for ax in axs.flat:
  ax.set_title(elements[count])
  ax.set_xlabel('molar amount, %')
  ax.set_ylabel('S(C2), %')
  plot = ax.scatter(data_cleaned[elements[count]],data_cleaned['S(C2), %'],
                   c=cluster_predictions, cmap=plt.cm.get_cmap('viridis', 7))
  count += 1
cb = fig.colorbar(plot, ax=axs)
plt.savefig('toc.png')

k_ellbow = []
for E in range(1,21):
  kmeans = KMeans(n_clusters=E)
  kmeans.fit(composition)
  score = kmeans.score(composition)
  k_ellbow.append(score)
plt.figure(figsize=(12,9))
plt.title('Elbow Curve')
plt.xlabel('n Cluster')
plt.ylabel('grad score')
plt.plot([7,7],[0, np.max(np.gradient(k_ellbow))])
plt.plot(range(1,21),np.gradient(k_ellbow),'k');

pca = PCA(n_components=2)
reducer_01 = pca.fit_transform(composition)

tsne = TSNE(n_components=2,random_state=42)
reducer_02 = tsne.fit_transform(composition)

fig, axs = plt.subplots(1,2,figsize = (15,9))
axs[0].set_title('Principal Components')
axs[1].set_title('t-SNE')
plot1 = axs[0].scatter(reducer_01[:,0],reducer_02[:,1], c=cluster_predictions, 
                       cmap=plt.cm.get_cmap('viridis', 7))
plot2 = axs[1].scatter(reducer_02[:,0],reducer_02[:,1], c=cluster_predictions, 
                       cmap=plt.cm.get_cmap('viridis', 7))
fig.colorbar(plot2, ax=axs);

from google.colab import files
uploaded = files.upload()

df = pd.read_excel(io.BytesIO(uploaded['Newdata2.xlsx']))
print(df)

df.head()

df.dtypes

df.dtypes
for x in df:
    if df[x].dtypes == "int64":
        df[x] = df[x].astype(float)
        print (df[x].dtypes)

df = df.select_dtypes(exclude=['object'])
df=df.fillna(df.mean())
X = df.drop('Ethylene',axis=1)
y = df['Ethylene']

from sklearn.svm import SVR

svr = SVR(kernel = 'linear',C = 1000)
from sklearn.model_selection import RandomizedSearchCV
hyper_params_svr = {'gamma':np.random.normal(12,2,10000),'C':np.random.normal(1,0.2,10000)}
svr_tune = SVR
g_search = RandomizedSearchCV(svr_tune,hyper_params_svr,cv=5,n_jobs=-1,random_state=10)
df = df.select_dtypes(exclude=['object'])
df=df.fillna(df.mean())
X = df.drop('Ethylene',axis=1)
y = df['Ethylene']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)
svr_rbf = SVR(kernel='rbf')
y_svr = svr_rbf.fit(X_train,y_train)
predict_svr_train = y_svr.predict(X_test)

print('Score on training set:', svr_rbf.score(X_train, y_train))
print('Score on testing set:', svr_rbf.score(X_test, y_test))


y_pred = y_svr.predict([[100.0,52.0,5.8]]) 

res = np.round(y_pred,2)

print(res) 

from sklearn.metrics import mean_squared_error
# SVR 
value1 = [8.60,3.50,5.60,7.50]       # Actual value
value2 = [7.75,6.07,7.18,6.45]       # Predicted value

print(value1)
print(value2)
print(mse)



